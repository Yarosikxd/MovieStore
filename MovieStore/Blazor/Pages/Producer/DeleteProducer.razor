@page "/DeleteProducer/{Id}"
@using Application.Service.ProducerService
@using Domain.Models
@inject ProducerService producerService
@inject NavigationManager NavigationManager

<h3>Delete Producer</h3>
<hr />

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Id" class="control-label">Producer Number</label>
                <input form="Id" class="form-control" @bind="@obj.Id" />
            </div>
            <div class="form-group">
                <label for="Picture" class="control-label">Picture</label>
                <input form="Picture" class="form-control" @bind="@obj.ProfilePictureURL" readonly />
                @if (!string.IsNullOrEmpty(obj.ProfilePictureURL))
                {
                    <img src="@obj.ProfilePictureURL" alt="Producers Picture" width="100" height="100" />
                }
            </div>
            <div class="form-group">
                <label for="Bio" class="control-label">Bio</label>
                <input form="Bio" class="form-control" @bind="@obj.Bio" />
            </div>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary btn-sm" @onclick="@DeleteProducerRecordAsync" value="Delete Producer" />
                <input type="button" class="btn btn-danger btn-sm" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>



@code {
    [Parameter]
    public string Id { get; set; }
    Producer obj = new Producer();

    protected override async Task OnInitializedAsync()
    {
        obj = await Task.Run(() => producerService.GetProducerByIdAsync(Convert.ToInt32(Id)));
    }

    protected async void DeleteProducerRecordAsync()
    {
        await producerService.DeleteProducerAsync(obj);
        NavigationManager.NavigateTo("Producers");
    }

    protected async void Cancel()
    {
        NavigationManager.NavigateTo("Producers");
    }
}
